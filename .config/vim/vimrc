set nocompatible   " Disable legacy vi things
set ignorecase     " Case-insensitive searching.
set smartcase      " But case-sensitive if expression contains a capital letter.
set relativenumber " Use relative line numbers by default
set ttyfast        " Set that we have a fast terminal
set hlsearch       " highlight the search results
set incsearch      " search as you type
set t_Co=256       " Explicitly tell Vim that the terminal supports 256 colors
set number         " Enable line numbers
set shortmess=Ia   " Abbreviate startup message
set smartindent    " GET SMART
set colorcolumn=80 " Consciously decide to make lines too long
set nowrap         " disable line wrapping
set signcolumn=yes " Always show the sign column
set backspace=indent,eol,start
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab
set fillchars+=vert:│ " Use long bar as vertical separator
set laststatus=2   " Always show status line
set termguicolors  " Nice colors
set shell=fish
set hidden         " support hiding modified buffers
set list           " show hidden characters

if has("nvim")
  set inccommand=nosplit
endif

" Mouse settings
set mouse+=a           " Enable mouse
if &term =~ '^screen'  " Use extended mouse mode when using tmux, screen
  set ttymouse=xterm2
endif

" Hide this junk
set wildignore+=*/_workspace,*/build/\,*/node_modules,*/target,*/vendor,*/venv*,*/tmp,*/dist/,*.pyc,*.egg-info,*.so

if has("gui_running")
    set guifont=Range\ Mono:h14
else
    :source $VIMRUNTIME/menu.vim
    :set wildmenu
    :set cpoptions-=<
    :set wildcharm=<C-Z>
    :map <F4> :emenu <C-Z>
endif

let mapleader=" "  " Map <leader> to space

filetype off
filetype plugin on
filetype indent on
syn on

" Set directory settings
" Layout:
" .config/vim
" ├── before    " stuff to load prior to plugins
" └── templates " new file templates
"
" .local/vim
" ├── swap      " swap files
" └── undo      " undo history

" Create a directory if it doesn't exist yet
function! s:EnsureDirectory(directory)
  if !isdirectory(expand(a:directory))
    call mkdir(expand(a:directory), 'p')
  endif
endfunction

" Put all swap files in here
set backupdir=$HOME/.local/vim/swap
set directory=$HOME/.local/vim/swap
call s:EnsureDirectory(&backupdir)
set backup

" Put undo history in here
set undodir=$HOME/.local/vim/undo
call s:EnsureDirectory(&undodir)
set undolevels=1000
set undofile

" Put templates here
let g:templatedir = expand("$HOME/.config/vim/templates")
call s:EnsureDirectory(templatedir)
" Use templates for new files
" from https://twitter.com/petdance/status/1009826710752317440
execute 'autocmd BufNewFile * silent! 0r' . g:templatedir . '/%:e.tpl'

" Put plugin bundle here
let g:bundledir = expand("$HOME/.config/vim/bundle")

" Language Settings

" Fix crontab weirdness
autocmd filetype crontab setlocal nobackup nowritebackup

autocmd filetype go setlocal noexpandtab
autocmd filetype json setlocal nofixendofline
autocmd filetype typescript,swift,ruby,markdown,journal,yaml,apiblueprint,lua,javascript,c,cpp,cs,objc setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd BufNewFile,BufRead *.html.erb let b:eruby_subtype = 'html'
autocmd BufNewFile,BufRead *.md.erb let b:eruby_subtype = 'markdown'
autocmd BufNewFile,BufRead jrnl*.txt set filetype=journal
autocmd BufNewFile,BufRead *.podspec set filetype=ruby
autocmd BufEnter,BufNew *.make set filetype=make
autocmd BufEnter,BufNew *.lalrpop set filetype=rust
autocmd BufEnter,BufNew *.m set filetype=objc
autocmd BufEnter,BufNew *.mm set filetype=objcpp
autocmd BufEnter,BufNew *.metal set filetype=cpp
autocmd filetype markdown,journal,apiblueprint set textwidth=80
autocmd filetype java set colorcolumn=100
autocmd filetype cs set colorcolumn=100

" Strip trailing spaces
autocmd BufWritePre * :%s/\s\+$//e

" Load pre-plugin settings
for fpath in glob('~/.config/vim/before/*.vim', 1, 1)
  execute 'source' fpath
endfor

if has("nvim")
lua <<EOF
vim.notify = require("notify")
EOF
endif

" Keybindings

" General
nnoremap Y y$
nnoremap <Leader>w :w<cr>
cnoremap <C-a> <Home>
nnoremap <Leader>y :call SendCopyRegisterToSystemClipboard()<cr>
nnoremap <Leader>p :call SendSystemClipboardToCopyRegister()<cr>
"" swap colon and single quote for easier commands
nnoremap ' :
nnoremap : '
vnoremap ' :
vnoremap : '

" Make
nnoremap <Leader>mm :make<cr>
nnoremap <Leader>mc :make clean<cr>
nnoremap <Leader>mt :make test<cr>
nnoremap <Leader>mr :make run<cr>

" Git
"" Show staging area
nnoremap <Leader>gc :terminal tig status<cr>
"" Tree view
nnoremap <Leader>gs :terminal tig<cr>
"" Log view
nnoremap <Leader>gl :terminal tig log<cr>
"" Show blame for current file
nnoremap <Leader>gb :execute "terminal tig blame " . @% . " +" . line(".")<cr>

" Layout
nnoremap vv :vsplit<cr>
nnoremap vh :split<cr>

" List operations
nnoremap <silent> gl "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o>/\w\+\_W\+<CR><c-l>
nnoremap <silent> gh "_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>

" Lookup
nnoremap <Leader>ag :Ag <cword><cr>
nnoremap <Leader>mn :execute '!man ' . expand("<cword>")<cr> " Show man page for current word

" Allow fenced code block highlighting in Markdown
let g:markdown_fenced_languages = ['ts=typescript', 'html', 'python', 'bash=sh', 'php', 'json', 'ruby', 'c', 'diff']

let g:python3_host_prog = '/bin/python'

" Status line
" Format: {color}Filename/List flags =spacer= {color}syntax {color}filetype {color}buffer%
" Note:   Print available colors with :so $VIMRUNTIME/syntax/hitest.vim
set statusline=%#LineNr#%f%k%w\ %m%r%=%#SpellBad#%{coc#status()}%{get(b:,'coc_current_function','')}%#CursorLineNr#\ \♛%4P%#LineNr#\ %#Question#%y

" Theme
set background=dark
let g:edge_style = 'neon'
let g:edge_transparent_background = 1
let g:edge_disable_italic_comment = 1
colo edge
